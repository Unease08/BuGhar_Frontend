import { useState } from "react";
import { Box } from "@mui/material";
import { Link, useNavigate } from "react-router-dom";
import api from "../../../library/Api";
import toast from "react-hot-toast";

const AddVulnerability = () => {
  const [showBulkInsert, setShowBulkInsert] = useState(false);
  const [vulnerabilityName, setVulnerabilityName] = useState("");
  const [vulnerabilityDescription, setVulnerabilityDescription] = useState("");
  const [bulkInsertDescription, setBulkInsertDescription] = useState("");
  const navigate = useNavigate(); 

  const handleBulkInsertClick = () => {
    setShowBulkInsert(!showBulkInsert);
  };

  const validateInputs = () => {
    if (!showBulkInsert) {
      if (!vulnerabilityName || vulnerabilityName.trim() === "") {
        toast.error("Vulnerability Name is required");
        return false;
      }
      if (!vulnerabilityDescription || vulnerabilityDescription.trim() === "") {
        toast.error("Vulnerability Description is required");
        return false;
      }
    } else {
      if (!bulkInsertDescription || bulkInsertDescription.trim() === "") {
        toast.error("Bulk Insert Description cannot be empty");
        return false;
      }

      try {
        const data = JSON.parse(bulkInsertDescription);
        if (!Array.isArray(data)) {
          toast.error("Bulk Insert format must be a valid JSON array");
          return false;
        }
        for (const item of data) {
          if (!item.name || !item.description) {
            toast.error(
              "Each item in Bulk Insert must have both a name and description"
            );
            return false;
          }
        }
      } catch (error) {
        toast.error("Bulk Insert Description must be valid JSON");
        return false;
      }
    }
    return true;
  };

  const handleSubmit = async () => {
    if (!validateInputs()) return; 

    const data = showBulkInsert
      ? JSON.parse(bulkInsertDescription) 
      : [
          {
            name: vulnerabilityName,
            description: vulnerabilityDescription,
          },
        ];

    if (showBulkInsert) {
      console.log("Bulk Insert Data:", data);
    }

    try {
      const response = await api.post("/vulnerability-type", data, {
        headers: {
          "Content-Type": "application/json", 
        },
      });

      toast.success(response.data.message);

      navigate("/vulnerability");
    } catch (error) {
      console.error("Error submitting vulnerability:", error);
      const errorMessage =
        (error.response && error.response.data && error.response.data.detail) ||
        "Unknown error occurred";
      toast.error(`Error: ${errorMessage}`); 
    }
  };

  return (
    <Box m="20px">
      <div className="text-3xl font-semibold text-white">
        Add Vulnerabilities
      </div>
      <div className="max-w-8xl mx-auto mt-10 p-6 bg-gray-800 rounded-lg shadow-lg flex flex-col gap-8">
        <div className="flex justify-end">
          <button
            onClick={handleBulkInsertClick}
            className="text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:outline-none font-medium rounded-lg text-lg px-2 py-1 focus:ring-green-800 shadow-lg transition-colors duration-200"
          >
            {showBulkInsert ? "Single Insert" : "Bulk Insert"}
          </button>
        </div>

        {showBulkInsert ? (
          <div className="mt-3">
            <label className="block mb-2 text-lg font-medium text-white">
              Bulk Insert
            </label>
            <textarea
              id="bulk_insert_description"
              rows="14"
              value={bulkInsertDescription}
              onChange={(e) => setBulkInsertDescription(e.target.value)}
              className="block p-2.5 w-full text-sm rounded-lg border bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-blue-500 focus:border-blue-500"
              placeholder='[
        {
            "name": "SQL Injection (CWE-89)",
            "description": "Manipulates an applications database through unsanitized user input."
        },
        {
            "name": "Cross-Site Scripting (XSS) - Reflected (CWE-79)",
            "description": "XSS attack where the payload is reflected off a web server."
        },
        {
            "name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
            "description": "Tricks users into executing unwanted actions on web applications."
        }
    ]'
            ></textarea>
          </div>
        ) : (
          <div className="grid gap-2 md:grid-cols-1">
            <div>
              <label className="block mb-2 text-lg font-medium text-white">
                Vulnerability Name
              </label>
              <input
                type="text"
                id="vulnerability_name"
                value={vulnerabilityName}
                onChange={(e) => setVulnerabilityName(e.target.value)}
                className="border text-lg rounded-lg focus:border-blue-500 block w-full p-2.5 bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-blue-500"
                placeholder="Enter Vulnerability Name"
              />
            </div>

            <div className="mt-3">
              <label className="block mb-2 text-lg font-medium text-white">
                Vulnerability Description
              </label>
              <textarea
                id="message"
                rows="8"
                value={vulnerabilityDescription}
                onChange={(e) => setVulnerabilityDescription(e.target.value)}
                className="block p-2.5 w-full text-sm rounded-lg border bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-blue-500 focus:border-blue-500"
                placeholder="Write your thoughts here..."
              ></textarea>
            </div>
          </div>
        )}

        <div className="flex justify-between">
          <Link to="/vulnerability">
            <button className="text-white bg-gray-500 hover:bg-gray-600 focus:ring-4 focus:outline-none font-medium rounded-lg text-lg w-full sm:w-auto px-5 py-2.5 text-center focus:ring-gray-700">
              Back
            </button>
          </Link>
          <button
            onClick={handleSubmit}
            className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none font-medium rounded-lg text-lg w-full sm:w-auto px-5 py-2.5 text-center focus:ring-blue-800"
          >
            Submit
          </button>
        </div>
      </div>
    </Box>
  );
};

export default AddVulnerability;
